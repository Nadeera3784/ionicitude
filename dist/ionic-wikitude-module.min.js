!function(){"use strict";function e(){var e=Error.apply(this,arguments);e.name=this.name="UnsupportedFeatureError",this.stack=e.stack,e.message?this.message=e.message:this.message="Worls loading error : Your device does not support one or several of it's requested features."}function r(){function e(){return r||(r=cordova.require("com.wikitude.phonegap.WikitudePlugin.WikitudePlugin")),r}var r=void 0;this.get=e}function t(r,t,o,n,i){function o(e){}function s(n){if(n||(n="main"),p.deviceSupportsFeatures){var i=r.defer();return console.log("launch"),t.get().loadARchitectWorld(function(e){i.resolve(e)},function(e){i.reject(e)},a(n),o.reqFeatures,o.worldConfig),i.promise}throw new e}function a(e){if(!o.worldsFolders.hasOwnProperty(e))throw new SyntaxError("Wikitude Module : launchAR() : The argument's value ('"+e+"')passed in launchAR doesn't match any property of the worldsFolders setting.");var r="www/"+o.worldsRootFolder,t=o.worldsFolders[e].folder?o.worldsFolders[e].folder:e,n=(o.worldsFolders[e].file?o.worldsFolders[e].file:"index")+".html";return r+"/"+t+"/"+n}function u(e){function r(){return e&&e.hasOwnProperty("onUrlInvokeCallback")&&"function"==typeof e.onUrlInvokeCallback}function o(){return!(e&&e.hasOwnProperty("doDeviceCheck")&&e.doDeviceCheck===!1)}if(console.log(e),!f){console.log("init service starting"),f=!0;var n=c;r()&&(n=e.onUrlInvokeCallback),t.get().setOnUrlInvokeCallback(n),o()?(console.log("checking device"),l()):console.log("device check skipped due to init settings")}}function l(){var e=r.defer();return t.get().isDeviceSupported(function(r){p.deviceSupportsFeatures=!0,e.resolve(r)},function(r){p.deviceSupportsFeatures=!1,e.reject(r)},o.reqFeatures),e.promise}function c(e){var r=d(e);try{i[r.funcName](r.parameters)}catch(t){throw t instanceof TypeError?new TypeError(r.funcName+"is either undefined or not a function in the Wikitude lib service."):t}}function d(e){if(e.substr(0,n.length)===n){var r={},t=e.substr(n.length),o=t.indexOf("?");if(-1===o)r.funcName=t,r.parameters=null;else try{r.funcName=t.substr(0,o);var i=t.substr(o+1);r.parameters=angular.fromJson(i)}catch(s){throw s instanceof SyntaxError?new SyntaxError("parseActionUrl() expects the substring following the '?' in the parameter string to be a valid JSON object. '"+i+"' given."):s}return r}throw new SyntaxError("parseActionUrl() expects first parameter to be a string starting with '"+n+"'.")}var f=!1,p={checkDevice:l,deviceSupportsFeatures:!1,initService:u,launchAR:s,settings:o};return p}e.prototype=Object.create(Error.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),angular.module("WikitudeModule",[]);var o={worldConfig:{camera_position:"back"},reqFeatures:["geo","2dtracking"],worldsRootFolder:"wikitude-worlds",worldsFolders:{main:{folder:"main",file:"index"}}};angular.module("WikitudeModule").value("settings",o),angular.module("WikitudeModule").constant("protocol","architectsdk://"),angular.module("WikitudeModule").service("plugin",r),angular.module("WikitudeModule").factory("Wikitude",t),t.$inject=["$q","plugin","settings","protocl","lib"]}();